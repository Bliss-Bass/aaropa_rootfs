function menu_reload {
	set RELOAD=true
	configfile /boot/grub/grub.cfg
}

function is_efi {
	if [ "${grub_platform}" = "efi" ]; then
		return 0
	fi
return 1
}

function efi_detect {
	if ! is_efi ; then
		return
	fi

	submenu --class=find.efi --hotkey=f "Detect EFI bootloaders" {
		for efi in (*,*)/efi/*/*.efi (*,*)/efi/*/*/*.efi (*,*)/*.efi (*,*)/*/*.efi ; do
			regexp --set=1:efi_device '^\((.*)\)/' "${efi}"
			if [ -e "${efi}" ]; then
				regexp --set=1:efi_name '/([A-Za-z]+)((x||aa)64|ia32)?\.efi$' "${efi}"
				tr -s efi_name_d -D "${efi_name}"
				regexp --set=1:efi_base '/(\w+)/[A-Za-z]+((x||aa)64|ia32)?\.efi$' "${efi}"
				tr -s os_class -D "${efi_base}"
				os_name=""
				if [ "${efi_name_d}" == "mm" -o "${efi_name_d}" == "fb" -o "${efi_name_d}" == "bootmgr" ]; then
					continue
				elif [ "${efi_name_d}" == "bootmgfw" ]; then
					os_name=Windows
					os_class=windows
				elif [ "${efi_name_d}" == "opencore" ]; then
					os_name=OpenCore
					os_class=macosx
				elif [ "${efi_name_d}" == "clover" ]; then
					os_name=Clover
					os_class=macosx
				elif [ "${efi_name_d}" == "memtest" ]; then
					os_name=memtest
					os_class=memtest
				elif [ -n "${os_class}" -a "${os_class}" != "boot" -a "${os_class}" != "efi" ]; then
					os_name=${efi_base}
				else
					os_class=efi
				fi
				if [ -z "${os_name}" ]; then
					os_name=${efi}
				else
					os_name="(${efi_device}) ${os_name}"
					if [ "${efi_name}" == "shim" ]; then
						os_name="${os_name} (${efi_name})"
					fi
				fi
				menuentry --class "${os_class}" --class unknown "${os_name}" "${efi_device}" "${efi}" {
					root="${2}"
					chainloader "${3}"
				}
			fi
		done
		menuentry --hotkey=q --class cancel "Cancel" {menu_reload}
	}
}

function memtest_detect {
	if ! is_efi ; then
		return
	fi

	if [ -f /boot/memtest ]; then
		menuentry --class=memtest --hotkey=m "Memory Test" {linux16 /boot/$1}
	fi
}

function toggle_pcmode {
	submenu --class driver --class="toggle_pcmode" "PC_MODE" {
		menuentry --class="enable_pcmode" "Enable PC_MODE" {
			pcmode=PC_MODE=1
			menu_reload
		}
		menuentry --class="disable_pcmode" "Disable PC_MODE" {
			pcmode=
			menu_reload
		}
	}
}

function toggle_ffmpeg {
	submenu --class driver --class="toggle_ffmpeg" "FFMPEG" {
		menuentry --class="enable_ffmpeg" "Enable FFMPEG" {
			ffmpeg="FFMPEG_CODEC=1 FFMPEG_PREFER_C2=1"
			menu_reload
		}
		menuentry --class="disable_ffmpeg" "Disable FFMPEG" {
			ffmpeg=
			menu_reload
		}
	}
}

function toggle_setupwizard {
	submenu --class driver --class="toggle_setupwizard" "Setup Wizard" {
		menuentry --class="enable_setupwizard" "Disable Setup Wizard" {
			setupwizard=SETUPWIZARD=0
			menu_reload
		}
		menuentry --class="disable_setupwizard" "Enable Setup Wizard" {
			setupwizard=
			menu_reload
		}
	}
}

function toggle_hwaccel {
	submenu --class driver --class="toggle_hwaccel" "Hardware Acceleration" {
		menuentry --class="enable_hwaccel" "Disable Hardware Acceleration" {
			hwaccel="nomodeset HWACCEL=0"
			menu_reload
		}
		menuentry --class="disable_hwaccel" "Enable Hardware Acceleration" {
			hwaccel=
			menu_reload
		}
	}
}

function add_entry {
	title="$1 $TITLE"
	shift
	menuentry --class blissos "$title" "$@" {
		linux "${KERNEL}" $KERNEL_ARGS "$@" $pcmode $ffmpeg $hwacccel $setupwizard $iso
		initrd "${INITRD}"
	}
}

function power_options {
	submenu --class power --class shutdown "Power options" {
		if is_efi; then
			menuentry --class efi "UEFI firmware settings" { fwsetup }
		fi
		menuentry --class restart "Reboot" { reboot }
		menuentry --class shutdown "Poweroff" { halt }
	}
}

function load_theme {
  set gfxmode=1024x768
  terminal_output gfxterm
	for font in $prefix/themes/*/*.pf2; do
		loadfont $font
	done
	for theme in $prefix/themes/*/theme.txt; do
    export theme
	done
}
